Given a list of ints, count how many triples
sum to at least a given target.

CountTriplets([2,3,4,5,6], 11) = 8

2    11- 2    = 9  key hashset
9    2+9

 So, counting through the possibilities:
2,3,6
2,4,5
2,4,6
2,5,6

3,4,5
3,4,6
3,5,6

4,5,6
We get
4+3+1 = 8

public int countTriplets(int[] A, int sum,  ){
       int count = 0;
       int length =  A.size();
       // psedo quicksort(A)
for (int i =0 ;   i < length; i++){
		for(int  j = i +1; i< length; j++ ){
			int temp = sum -  A[i] + A[j];
			int k= binarySearch(A, j+1, length, temp);
			if(k != -1){
			   	// k =9 length 10
				count  += length - k;
}
}
}
return count;
	//System.out.println(“Count:”+ count);
}

.//



Please use this Google doc to code during your interview. To free your hands for coding, we recommend that you use a headset or a phone with speaker option.

Best,
Google Staffing

Hello!

int getSetBits(int input){
    	int count = 0;
	for (int i  =0 ; i< 32;  i++){

    count  += input & 0x1;
    input >> 1;
}

return count;
}


int getSetBits(int input){
    	int count = 0;
       int size  =  sizeof(int);
	int bits = size*8;

	for (int i  =0 ; i< bits;  i++){
    count  += input & 0x1;
    input >> 1;
}

return count;
}

Counter
1
last sec
last min last hour












class Counter{
	static int count;
       static Counter c;

	HashMap<Time, Intger> lastSecMap = new HashMap<Time, Integer>();
       HashMap<Time, Integer> lastMinMap = new HashMap<Time, Integer>();
HashMap<Time, Integer> lastHourMap = new HashMap<Time, Integer>();

int lastSecCount;
int lastMinCount;
int lasHrCount;

	private Counter(){
 		count  = 0;
		lastSecCount = count;
}
public static Counter getInstance(){
if (c){
 return c;
}
else
 c =  new Counter()
return c;
}

public synchronized void incrementCount(){
	++count;
	Time t = getTime();
	Sec s = t.getSec();
	Min m = t.getMin();
 	Hr h = t.getHr();

	s.put(s, count);
m.put(m, count);
h.put(h, count);

return;
}
/*
incrementCount()
incrementCount()    count -=2  sec = 11
x = getCountLastSec() count =2;
incrementCount()  count = 3    sec = 11
y = getCountLastSec()  count = 3;
*/
public synchronized int getCountLastSec(){
	Time t =  getSecTime();  // 11
	if(lastSecMap.containsKey(t)){
		return lastSecMap.get(t);
}
else{
     lastSecMap.put(t, count);
     return count;

       }
}

public int getCountLastMin(){

	Minute t = getCurrentMinuteTime();
	if(lastMinMap.containsKey(t-1))
		return lastMinMap.get(t-1);
	else{

}
}

public int getCountLastHour(){
	return lastHrCount;
}


}














CountPairs([1,2,3,4,5,6,7], 7)
temp[1, 2,3,4,5,6,7]
nlogn sortedarrya
i  ->  0 to length-1
j ->  length-1 to i+1
break if i+j < sum


1 2 X
1 3 X
1 4 X
1 5 X
1 6 O
1 7 O

2 3 X
2 4 X
2 5 O
2 6 O
2 7 O

3 4 O
3 5 O
3 6 O
3 7 O

1 X
2 X
3 X
4 X
5 O
6 O
